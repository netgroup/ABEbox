from charm.core.engine.util import bytesToObject
from charm.schemes.abenc.abenc_bsw07 import CPabe_BSW07
from charm.toolbox.pairinggroup import hashPair, PairingGroup, ZR
from time import time

import abe_primitives as abe
import pairing_group_primitives as pg


if __name__ == '__main__':

    pairing_group = PairingGroup('MNT224')

    ciphertext = bytesToObject(bytes.fromhex('654a796456727475477a45512f425642745172796a6b393367654d795141703367534859695973414c674a4c446d41592f7664775a6d64355368656e454852383344356d646d667662583939505039382b7647347639713937592f4837302f33703950784f4662376839667a34326c2f32493364332f64504c342f632f5a626a595a6662596466362b452f6a767835324d61786a4d523579786749374d65414a393861644d75375752666469474b7332724e5371743565784b4f4e71786a757859326463727268537342507855734a546b523263702f464768623249682f46714c74735068396b393468574561364871646778426875692f5a6a746e484667334d314951515269486152783262485a7a577a305662466a6b5344355765786651344e6644786561575251794c6c67556f3046613030506b4131336731722f5950494f43457a38484463764279644c444864712b54413453614c4f77596b316b6a624d557377463172646f47756b514c7949655a6772515844456265624c4e42546a474f33643448554c542b774b7561444949384f444c4b696e2b72384c6f7154714b34434d525468676d4d44727a6e7a71326a70687069424867316e786b4f6945484a626e4f31734d58694574412b4f5556314776426446437a4f31707369713077703374597477597a36494e71524c794245693038677a35614b3436434f7548755569364c687132544330536c556630547643624c7042486f4b564b56426831614236504f4673544c5a79575a56525259416269414733365a336c7737626a547268374832312b2f613853514e764e484361766863733246556c306859694150766f6e5852516b434142634c586d5162524f4b72414d51774f41644d66425a6e576d5448536353446742526158344d71306977524d76766c516c2b76766c36477a2b633669544771554b4956583264585072594e6b71554d64697553686d4e42454d6f5347734d555636393941674b6b565050637a644a736d5a6e777970314f4c746b7248396c656e767a36637548553154726463464a4d537a6d68774b795349354b6e2f58745262374e4161387273477a4e5679376b44546a4e45327633725450714a734c4736655138654863304a3756627173627172342f5443743935746b73797261707161524359705864736c4369424b684f476f4e6f744c68756559524d7a303536514965324c5a55387458783236616737426261717977736e597058386b49316b564e4238647a617665744b2b3642693061662b75634d7a346a2b467164453031456f7670616471584e456849586e32784262364c4d4b63496741414d72702f675578564631525379536f445454437635313044773846525a676d6e506351467a6c6744627076576e2b46522f6a556549462f7967626c7057504c77424b67512b365a623378662f336874564939466f37314f517a61396d3142356370626566696f4a55654c79325057514b416169412f65394161714d70656c3656686e4d6378366b764c34624e616363627a6f7a5434766775764d496c6c6139566d56646265345370664c3779577251612f724d6e73514c6b426d383145663475516f4f6a6a466173592f4e64727363684461356c427457305171314335385541736338564b4f354e7245535746697345776c446a3450314a6173317967696b6e395a614f686e39565757786b7974435772313470384c63524f592b2f50352b6566444330706a564d502b6448362b4d71305a5a3168594d6432392f77455779444249'), pairing_group)
    print('CIPHERTEXT = (%d) %s' % (len(ciphertext), ciphertext))

    pk = bytesToObject(bytes.fromhex('654a79565663474f5779454d2f4a556f3578777744777a30563670566c465a703970424470625356716c582b66526c37544c4b3333634e4c486a77776e686c37654e746639743932622f766a38656631644c73646a334f302f2f482f7a2f6d32502b7a6d374c2f5439652f5a5a722b5863646a566674684a30734f756c384f75795278493834476b4e4766715844496e476961332b5a2b3441684e746268764a562f635a5278464c35714273654a6c624a632f50646237677144366a3138776c6b6c7238794e78574967323158584e6c7830756179317633575a3068564637754538556c66785a6954553851572f59454d466b4351336259687468534671535975692f7a4638424a47396b41436c7338384b4f4f7a33654a2b43376e45642b545152324f4174754d6a506e653539786f5041546e416d4c624848646e6f6872304c475a78656d7645557979447a632f44576a77496a4952483977654b3454474738777a6157365337526b6a516c49486b4f4b737a6d435278716f696d72782f67316f697855537237316f704c3766747a51457945706d514e78434e58634b7078776d425657555a556f6e6b46416a6e77474e755942436a564f4b4d455535576e7936715731362f324177673263436d5239684845696b64334c596f725a55677971304d44363643754e7373694b304770526d3959575931514747536162735058472b354369476971487058343141792f76676f5034705a497a3069326d6f31797473396239473565326f756a744a644b385a446f67747836684a4d6f4578484b596d56712b4235386c73666a4861394f41786777435238597a38664c355869362f6e3439666272784a52712f52734856734a6c47686a2b6f6f6c5133386d7742424a6c62357972684f586546745777644c70546643564c2f5a425a54325a3264504c717a316d554e6d374e666f34615744566e744a545a495779635a6861733764486c516331494c395955746d37313144324169414274384f697a4d613179394d5a47685a63783777434b5544303076455453464e593877447a71707264506c7435587550634966774942664469556141464d314f6b476a424a35626f3639625354782f327a686f4b4e68694871652b327367646b624f62554671485a544c516d46574f566b5636454b335456536f765074754d6c437372705332336965494157325a4759586739334c71565544525450347a677a75356947747a77517344686e65654d782f55684c4d32344c73787a4b5247434b54304c3138666758614f684e304d68704b3543474a36425261796838335a34334d556d416b3050343761455934393452595956326b6e55726f647239376a467265366a416678757a4977412f72512b324c5671636949335867664972373363372b39524f625131'), pairing_group)
    sk = bytesToObject(bytes.fromhex('654a7964566346714844454d2f5a566c7a6e7577505a59743531625948417546356c62436b705a635367366c6d785a4b794c2f58656e716157556f767957474747567557394a3665354a666c744e77635870627a2b647654772b567950732b2f356575663538664c636a7a4d31643850543738657366704630764567656a786f6d593863447a6e312b63707a7064744873753038742b5a505437597777735a6566655848774b6e69686a6b6e64356a7a536d63353256664a397458343166465870366e465a7844466f69575347342b4e4643376e73685475392b4978716a4b45686a752b444d4a38786f6755594e543870485148324f647558596e4c584e6d4372473641394a745a57536f35324c46744d327362314c4331565976582b6130346837774b635941486f4f712b4c38464a5a5871714777504d6f356e5a504e7a556434304467456738566268754e6f4f42437669766e72784242424670526d76695a4455383936395445716676304d767039744e64666f3979484261716252476b656f4939566a7667444c496f7751675541436b30667a514f6c594259504845524c372f426b3431566c3068316b364868304654424d6d6f6f565664714174517132657442456a685a4b5869554c65316c614f36764d78657a73314959715a4b6f653252415151464e446569644747566c4c4a41463973705666646c4555736c554e45556252417334464c576c57386d726e5942496c637969792b43435746794767317574626655536e737765483745545159414170596a2f49356d3732773866333636564774566e614878595157304856636e2b4c36476c5470316f5344697a5536306b54646b3851514359616d514947734d32704b4f4f76665959456474677775444c68575041674637313670594d65314d72327835734b76506e544b53364d523543436447787730656f307148336844426e434b74736d6f374234436c6d31306256714635687673346c7057534f523971423768574d45614d395a436a654c334239316148734844765561375232347135466856516a42665067315057596874466c2f777247683879507430385a4e484a306476544631726147767a4b6357626745324972435255796a7a50734c68634d566c446b56724576476949754541394e6e7a4d6f376f5a456248793952656b353243516b4b6e336630523644306c6c69767057426f5a4c7459312f307168705a4369315a5647776a4b566d4a68653978756d53365266474b50374d3053686652543471513456356b6a42394d75787268704f387236325141736c2b65664e3137597557512f6a762f2b3953386f45616d2f'), pairing_group)
    print('ABE PK =', pk)
    print('ABE SK =', sk)

    cpabe = CPabe_BSW07(pairing_group)
    pg_elem = pg.random_pairing_group_elem_gen(pairing_group)
    policy = '(DEPT1 and TEAM1)'

    sample_enc = 0
    sample_mod_enc = 0
    sample_dec = 0
    sample_mod_dec = 0
    sample_hc_dec = 0
    sample_mod_hc_dec = 0
    sample_num = 100
    iterations = 1

    # ========== ENCRYPTION ========== #
    for k in range(sample_num):
        # Their solution
        starting = time() * 1000.0
        for i in range(iterations):
            cpabe.encrypt(pk, pg_elem, policy)
        sample_enc += ((time() * 1000.0) - starting)
    print('ENC =', sample_enc / sample_num)

    # ========== MODULE ENCRYPTION ========== #
    for k in range(sample_num):
        # Their solution
        starting = time() * 1000.0
        for i in range(iterations):
            c = abe.encrypt(pg_elem, pairing_group, pk, policy)
        sample_mod_enc += ((time() * 1000.0) - starting)
    print('MODULE ENC =', sample_mod_enc / sample_num)

    # ========== DECRYPTION ========== #
    ciphertext['policy'] = '(DEPT1 and TEAM1)'
    for k in range(sample_num):
        # Their solution
        starting = time() * 1000.0
        for i in range(iterations):
            cpabe.decrypt(pk, sk, ciphertext)
        sample_dec += ((time() * 1000.0) - starting)
    print('DEC =', sample_dec / sample_num)

    # ========== MODULE DECRYPTION ========== #
    ciphertext['policy'] = '(DEPT1 and TEAM1)'
    for k in range(sample_num):
        # Their solution
        starting = time() * 1000.0
        for i in range(iterations):
            c = abe.decrypt(ciphertext, pk, sk, pairing_group)
        sample_mod_dec += ((time() * 1000.0) - starting)
    print('MODULE DEC =', sample_mod_dec / sample_num)

    # ========== HASH CHAIN DECRYPTION ========== #
    for k in range(sample_num):
        # Our solution
        starting = time() * 1000.0
        cpabe.decrypt(pk, sk, ciphertext)
        for j in range(iterations - 1):
            r = pairing_group.init(ZR, int(hashPair(pg_elem).decode('utf-8'), 16))
            res_pg_elem = pg_elem ** r
        sample_hc_dec += ((time() * 1000.0) - starting)
    print('HASH CHAIN DEC =', sample_hc_dec / sample_num)

    # ========== MODULE HASH CHAIN DECRYPTION ========== #
    for k in range(sample_num):
        # Our solution
        starting = time() * 1000.0
        c = abe.decrypt(ciphertext, pk, sk, pairing_group)
        d = pg.hash_chain(pairing_group, c, iterations - 1)
        sample_mod_hc_dec += ((time() * 1000.0) - starting)
    print('MODULE HASH CHAIN DEC =', sample_mod_hc_dec / sample_num)
